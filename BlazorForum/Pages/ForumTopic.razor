@page "/forum/category/topic/{id:int}/{slug}"
@using BlazorForum.Pages.Components
@using BlazorForum.Domain.Utilities.Formatting

@inject NavigationManager navManager
@inject Domain.Interfaces.IManageForumTopics manageForumTopics
@inject Domain.Interfaces.IManageForumPosts  manageForumPosts
@inject IJSRuntime JSRuntime

@if (topic == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> Loading</em>
    </div>
}
else
{
    <header class="forum-topic-header">
        <h3>@topic.Title</h3>
    </header>
    <div class="forum-topic-text-div">
        @topic.TopicText
    </div>

    if (posts != null && posts.Count > 0)
    {
        <ul class="forum-post-ul">
            @foreach (var post in posts)
            {
                <li>
                    @post.PostText
                    <div class="forum-post-time">
                        Posted @DateTimeFormatting.RelativeDateAgo(post.PostedDate)
                    </div>
                </li>
            }
        </ul>
    }

    <div class="text-center">
        <button class="btn btn-blazorforum @loadMoreVisibility" @onclick="LoadMorePosts">Load More</button>
    </div>
}

<section class="mt-4 mb-3">
    <h4>Post a Reply</h4>
    <AuthorizeView>
        <Authorized>
            <AddNewPostForm OnPostAdded="UpdatePosts" TopicId="@id"></AddNewPostForm>
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-secondary">
                <span class="text-secondary">You must be logged in to add a new post.</span>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</section>


@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string slug { get; set; }
    private Models.ForumTopic topic;
    private List<Models.ForumPost> posts;
    private int maxCount = 10;
    private string loadMoreVisibility;

    protected override async Task OnInitializedAsync()
    {
        topic = await manageForumTopics.GetForumTopicAsync(id);
        posts = await manageForumPosts.GetForumPostsLimitedAsync(id, maxCount);

        if (maxCount > posts.Count)
            loadMoreVisibility = "d-none";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setDocTitle", topic.Title);
    }

    public void UpdatePosts()
    {
        posts = manageForumPosts.GetForumPostsLimitedAsync(id, maxCount).Result;
        StateHasChanged();
    }

    public async Task LoadMorePosts()
    {
        maxCount += 10;
        posts = await manageForumPosts.GetForumPostsLimitedAsync(id, maxCount);

        if (maxCount > posts.Count)
            loadMoreVisibility = "d-none";

        StateHasChanged();
    }
}
