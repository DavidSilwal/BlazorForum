@inject IManageForumTopics manageForumTopics
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime

<EditForm id="TestForm" EditContext="@_editContext" OnSubmit="PostTopic">
    <DataAnnotationsValidator />
    <div class="input-group">
        <div class="input-group-prepend">
            <label class="input-group-text">Title</label>
        </div>
        <InputText id="Title" @bind-Value="forumTopic.Title" class="@titleClass" />
    </div>
    <ValidationMessage For="@(() => forumTopic.Title)" />

    <div class="mt-2">
        <InputTextArea id="TopicText" @bind-Value="forumTopic.TopicText" rows="3" class="@textAreaClass" />
    </div>
    <ValidationMessage For="@(() => forumTopic.TopicText)" />
    <button id="submitBtn" class="btn btn-blazorforum mt-2 @btnVisibility" type="submit">Post Topic</button>
    <div class="rounded bg-veryDarkBlue p-2 mt-2 text-light @submitVisibility"><i class="oi oi-cog se-spin-icon"></i> Posting</div>
</EditForm>

@code {
    [Parameter] public Action OnTopicAdded { get; set; }
    [Parameter] public int ForumId { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    private EditContext _editContext;
    private Models.ForumTopic forumTopic = new Models.ForumTopic() { UserId = "placeholder"};
    private string btnVisibility = "d-block";
    private string submitVisibility = "d-none";
    private string titleClass { get; set; } = "form-control";
    private string textAreaClass { get; set; } = "mt-2 form-control";

    protected override void OnInitialized()
    {
        _editContext = new EditContext(forumTopic);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("methods.loadEditor");
        }
    }

    public async Task PostTopic()
    {
        var editorText = await jsRuntime.InvokeAsync<string>("methods.getTopicText");
        // There's probably a better way to do this. Maybe CKEditor has a way to properly format without needing this
        forumTopic.TopicText = RegularExp.RemoveScriptTags(System.Web.HttpUtility.HtmlDecode(editorText));
        var isValid = _editContext.Validate();
        if (isValid)
        {
            btnVisibility = "d-none";
            submitVisibility = "d-inline-block";
            var newTopic = new ForumTopic()
            {
                Title = forumTopic.Title,
                TopicText = forumTopic.TopicText,
                UserId = CurrentUserId,
                PostedDate = DateTime.Now.ToUniversalTime(),
                ForumCategoryId = ForumId,
                Flags = 0,
                IsModeratorChanged = false,
                IsDeleted = false,
                IsApproved = true
            };
            var posted = await manageForumTopics.PostNewTopicAsync(newTopic);

            btnVisibility = "d-inline-block";
            submitVisibility = "d-none";
            forumTopic.Title = string.Empty;
            forumTopic.TopicText = string.Empty;

            // TODO: This isn't clearing quite right.
            await jsRuntime.InvokeVoidAsync("methods.clearEditor");

            titleClass = "form-control clear-validation";
            textAreaClass = "mt-2 form-control clear-validation";

            OnTopicAdded?.Invoke();
        }

    }
}
