@inject Domain.Interfaces.IManageForumPosts manageForumPosts
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime

<EditForm EditContext="@_editContext" OnSubmit="AddNewPost">
    <DataAnnotationsValidator />
    <InputTextArea id="@("PostText-" + forumPost.ForumPostId)" @bind-Value="forumPost.PostText" />
    <ValidationMessage For="@(() => forumPost.PostText)" />
    <button class="btn btn-blazorforum mt-2 @btnVisibility" type="submit">
        @GeneralResources.AddPostBtnText
    </button>
    <div class="rounded bg-veryDarkBlue p-2 mt-2 text-light @submitVisibility">
        <i class="oi oi-cog se-spin-icon"></i> @GeneralResources.BtnPostingText
    </div>
</EditForm>

@code {
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public Action OnPostAdded { get; set; }
    [Parameter] public Action OnPostUpdated { get; set; }
    [Parameter] public Action OnCancel { get; set; }
    [Parameter] public Models.ForumPost PostToEdit { get; set; }
    [Parameter] public int TopicId { get; set; }
    private EditContext _editContext;
    private Models.ForumPost forumPost = new Models.ForumPost() { UserId = "placeholder" };
    private string btnVisibility = "d-block";
    private string submitVisibility = "d-none";

    protected override void OnInitialized()
    {
        _editContext = new EditContext(forumPost);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("methods.loadEditor", "PostText-" + forumPost.ForumPostId);
        }
    }

    private async Task AddNewPost()
    {
        forumPost.PostText = await jsRuntime.InvokeAsync<string>("methods.getTargetedEditorText", "PostText-" + forumPost.ForumPostId);
        var isValid = _editContext.Validate();
        if (isValid)
        {
            btnVisibility = "d-none";
            submitVisibility = "d-inline-block";

            var newPost = new Models.ForumPost()
            {
                PostText = forumPost.PostText,
                UserId = CurrentUserId,
                PostedDate = DateTime.Now.ToUniversalTime(),
                ForumTopicId = TopicId,
                Flags = 0,
                IsModeratorChanged = false,
                IsDeleted = false,
                IsApproved = true
            };
            var posted = await manageForumPosts.AddNewPostAsync(newPost);

            btnVisibility = "d-inline-block";
            submitVisibility = "d-none";
            forumPost.PostText = string.Empty;
            await jsRuntime.InvokeVoidAsync("methods.clearTargetedEditor", "PostText-" + forumPost.ForumPostId);

            OnPostAdded?.Invoke();
        }
    }
}
