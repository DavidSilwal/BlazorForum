@page "/forum/category/{id:int}/{slug}"
@inject NavigationManager navManager
@inject Domain.Interfaces.IManageForumCategories manageForumCategories
@inject Domain.Interfaces.IManageForumTopics manageForumTopics
@inject UserManager<IdentityUser> userManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime

@if (category == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> Loading</em>
    </div>
}
else
{
    <header class="forum-category-header">
        <h3>@category.Title</h3>
        <span class="forum-category-description">@category.Description</span>
    </header>

    <ul class="forum-ul">
    @if (topics == null || topics.Count == 0)
    {
        <li>No topics found.</li>
    }
    else
    {
        @foreach (var topic in topics)
        {
            <li>
                <a href="@String.Format("/forum/category/topic/{0}/{1}",
                        topic.ForumTopicId, UrlFormatting.PrepareUrlText(topic.Title))">
                    @topic.Title
                </a>
                <div class="topic-blazifier">
                    Posted @Domain.Utilities.Formatting.DateTimeFormatting.RelativeDateAgo(topic.PostedDate)
                    by @topic.UserName
                </div>
            </li>
        }
        <div class="text-center">
            <button class="btn btn-blazorforum @loadMoreVisibility" @onclick="LoadMoreTopicsAsync">Load More</button>
        </div>
    }
    </ul>

    <section class="mt-4 mb-3">
        <h4>Create a New Topic</h4>
        <AuthorizeView>
            <Authorized>
                <TopicForm OnTopicAdded="UpdateTopicsAsync" ForumId="@id" CurrentUserId="@CurrentUserId"></TopicForm>
            </Authorized>
            <NotAuthorized>
                <div class="alert alert-secondary">
                    <span class="text-secondary">You must be logged in to post a new topic.</span>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </section>
}

@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string slug { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    private List<Models.ForumCategory> categories;
    private Models.ForumCategory category;
    private List<Models.ForumTopic> topics { get; set; }
    private int maxCount = 10;
    private string loadMoreVisibility;

    protected override async Task OnInitializedAsync()
    {
        category = await manageForumCategories.GetForumCategoryAsync(id);
        topics = await manageForumTopics.GetApprovedForumTopicsAsync(id);

        if (maxCount >= topics.Count)
            loadMoreVisibility = "d-none";

        topics = topics.OrderByDescending(p => p.PostedDate).Take(maxCount).ToList();
        CurrentUserId = await new Domain.Utilities.Membership.UserInfo(userManager, authStateProvider).GetUserId();
        await AddUserToTopicAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setDocTitle", category.Title);
    }

    public async void UpdateTopicsAsync()
    {
        topics = await manageForumTopics.GetApprovedForumTopicsAsync(id);

        if (maxCount >= topics.Count)
            loadMoreVisibility = "d-none";
        else
            loadMoreVisibility = "d-inline-block";

        topics = topics.OrderByDescending(p => p.PostedDate).Take(maxCount).ToList();

        await AddUserToTopicAsync();
        StateHasChanged();
    }

    public async Task LoadMoreTopicsAsync()
    {
        maxCount += 10;
        topics = await manageForumTopics.GetApprovedForumTopicsAsync(id);

        if (maxCount >= topics.Count)
            loadMoreVisibility = "d-none";
        else
            loadMoreVisibility = "d-inline-block";

        topics = topics.OrderByDescending(p => p.PostedDate).Take(maxCount).ToList();

        await AddUserToTopicAsync();
        StateHasChanged();
    }

    private async Task AddUserToTopicAsync()
    {
        foreach (var topic in topics)
        {
            var user = await userManager.FindByIdAsync(topic.UserId);
            topic.UserName = user.UserName;
        }
    }
}
