@page "/"
@namespace BlazorForum.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Domain.Interfaces
@inject Data.ApplicationDbContext context

@{
    Layout = null;
    string themeName = new Domain.Interfaces.ManageThemes(context)
        .GetSelectedThemeNameAsync().Result;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BlazorForum</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/blazorforum-styles.min.css" rel="stylesheet" />
    @if (!String.IsNullOrEmpty(themeName))
    {
        <link href="~/custom-themes/@themeName/styles.css" rel="stylesheet" />
    }
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <script src="_framework/blazor.server.js"></script>
    <script>
        setDocTitle = (title) => { document.title = title; };
    </script>
    <script src="~/scripts/js/ckeditor.js"></script>
    <script>
        var ckeditor = null;
        var allCkEditors = [];
        window.methods = {
            loadEditor: function (TextAreaId) {
                ClassicEditor
                    .create(document.querySelector('#' + TextAreaId))
                    .then(editor => {
                        ckeditor = editor;

                        // Remove editor from array so it can be re-added if multiple edits without page refresh.
                        if(ckEditor(TextAreaId))
                            allCkEditors.pop(editor);

                        allCkEditors.push(editor);
                    })
                    .catch(error => {
                        console.error(error);
                    });
            },
            getEditorText: function () {
                return ckeditor.getData();
            },
            getTargetedEditorText: function (TextAreaId) {
                return ckEditor(TextAreaId).getData();
            },
            clearEditor: function () {
                ckeditor.setData('');
            },
            clearTargetedEditor: function (TextAreaId) {
                ckEditor(TextAreaId).setData('');
            }
        }

        function ckEditor(name) {
            for (var i = 0; i < allCkEditors.length; i++) {
                if (allCkEditors[i].sourceElement.id === name) return allCkEditors[i];
            }
            return null;
        }
    </script>
</body>
</html>
